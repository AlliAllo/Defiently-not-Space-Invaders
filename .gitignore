import pygame
import time
from pygame.locals import *
from copy import deepcopy
import os
import random

AFK = 0

shots = []
npcs = []

PAUSE = False

clock = pygame.time.Clock()
(width, height) = (900,750)

background = (0,0,0)

Display = pygame.display.set_mode((width, height))
Running = True
pygame.display.set_caption('Definitely not Space Invaders')
playerPNG = pygame.image.load(os.path.join("jet.png")).convert_alpha()
shot1 = pygame.image.load(os.path.join("bullet.png")).convert_alpha()
explo = pygame.image.load(os.path.join("explo.png")).convert_alpha()



npcGraphicRes1 = [120,120] # SQUARE PNG







FPS = 144
maxHeight = 300

jetWidth = 100
jetHeight = 100

#"stats" for the Player
class Player():
    def __init__(self,x,y):
        self.x = x
        self.y = y
        self.speed = 9
        self.damage = 2
        self.health = 100
        self.velocity = 25
        self.critical = 10


    def draw(self,screen):
        self.screen = screen

        self.screen.blit(playerPNG,(self.x,self.y))


#NPC stats
class NPC():
    def __init__(self,x,y,dmg,HP,vel,xspeed,yspeed,npcWidth,npcHeight,graphicPath):
        self.x = x
        self.y = y
        self.speed = [xspeed,yspeed]
        self.vel = vel
        self.NPCWidth = width
        self.NPCHeight = height
        self.HP = HP
        self.dmg = dmg
        self.npcWidth = npcWidth
        self.npcHeight = npcHeight

        self.right = True
        self.down = True

        self.npcGraphic = pygame.image.load(os.path.join(graphicPath)).convert_alpha()




    def draw(self,screen):
        screen.blit(self.npcGraphic,(self.x,self.y))


    def npcMovement(self):
        # x posision
        if self.right:
            self.x += self.speed[0]
            if self.x > width - self.npcWidth:
                self.right = False
        if not self.right:
            self.x -= self.speed[0]
            if self.x <= 0:
                self.right = True
        # y posision
        if self.down:
            self.y += self.speed[1]
            if self.y > height/2 - self.npcHeight:
                self.down = False
        if not self.down:
            self.y -= self.speed[1]
            if self.y <= 0:
                self.down = True




class Projectile():
    def __init__(self,x,y,speed,graphicPath):
        self.x = x
        self.y = y
        self.speed = speed
        self.graphicPath = graphicPath

    def draw(self,screen):
        self.screen = screen
        for shot in shots:
            pygame.image.load()
            self.screen.blit(self.graphicPath,(self.x,self.y))




#Hope you know what this is...
class Collision:
    def collision(self, x1, y1, x2, y2, sizeX, sizeY):
        if x1 >= x2 and x1 <= x2 + sizeX:
            if y1 >= y2 and y1 <= y2 + sizeY:
                return True
        return False


class Font():
    def __init__(self,x,y,color,size):
        self.x = x
        self.y = y
        self.color = color
        self.size = size

    def draw(self):
        # Health score
        self.healthFont = pygame.font.Font("pepega.ttf", self.size)
        self.healthText = self.healthFont.render("HEALTH:" + str(self.player.health), True, self.color,background)
        self.healthRect = self.healthText.get_rect()
        self.healthRect.center = (self.x, self.y)

        #scoreboard
        self.scoreFont = pygame.font.Font("pepega.ttf", self.size)
        self.scoreText = self.scoreFont.render("SCORE:" + str(SCORE), True, self.color, background)
        self.scoreRect = self.scoreText.get_rect()
        self.scoreRect.center = (self.x, self.y)

#class powerUps:



def update():
    #Make NPC move, and come down from "space"
    Display.fill(background)


    player.draw(Display)
    for npc in npcs:
        npc.draw(Display)

    pygame.display.flip()


player = Player(0, 0)
npcs.append(NPC((random.randint(0,(width-120))),(random.randint(0,350)), 2, 10, 10, 5,2,npcGraphicRes1[0],npcGraphicRes1[1],"square.png"))

while Running:
    press = pygame.key.get_pressed()
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            Running = False


    #Movement and wall collisions
    if (press[pygame.K_RIGHT] or press[pygame.K_d]) and not player.x > width-jetWidth:
        player.x += player.speed

    if (press[pygame.K_LEFT] or press[pygame.K_a]) and not player.x < 0:
        player.x -= player.speed

    if (press[pygame.K_UP] or press[pygame.K_w]) and not player.y < 5:
        player.y -= player.speed

    if (press[pygame.K_DOWN] or press[pygame.K_s]) and not player.y > height-jetHeight-10:
        player.y += player.speed

    if (press[pygame.K_ESCAPE]):
        Running = False

    if (press[pygame.K_p]):
        PAUSE = True
        #ADD PAUSE FUNCTION
        pass


    if (press[pygame.K_SPACE]):

        npcs.append(NPC((random.randint(0, (width - npcGraphicRes1[0]))), (random.randint(0, maxHeight)), 2, 10, 10, 5, 7, 120, 120,"explo.png"))



    if not PAUSE:
        for npc in npcs:
            npc.npcMovement()

        update()





#MAKING SHOOTING ROCKETS/MISSLES

#MAKE STARS WITH A "FORWARD ANIMATION"

#HOW TO PERMANANTLY DELETE A OBJECT -- AND COORDS

#RESTART BUTTON

#HEALTH BAR FOR BOSS
